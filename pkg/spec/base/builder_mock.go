// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go

// Package specbase is a generated GoMock package.
package specbase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatementBuilder is a mock of StatementBuilder interface.
type MockStatementBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockStatementBuilderMockRecorder
}

// MockStatementBuilderMockRecorder is the mock recorder for MockStatementBuilder.
type MockStatementBuilderMockRecorder struct {
	mock *MockStatementBuilder
}

// NewMockStatementBuilder creates a new mock instance.
func NewMockStatementBuilder(ctrl *gomock.Controller) *MockStatementBuilder {
	mock := &MockStatementBuilder{ctrl: ctrl}
	mock.recorder = &MockStatementBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatementBuilder) EXPECT() *MockStatementBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockStatementBuilder) Build(records ...Record) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range records {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockStatementBuilderMockRecorder) Build(records ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockStatementBuilder)(nil).Build), records...)
}
