// Code generated by MockGen. DO NOT EDIT.
// Source: response.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// GetError mocks base method.
func (m *MockResponse) GetError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetError indicates an expected call of GetError.
func (mr *MockResponseMockRecorder) GetError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockResponse)(nil).GetError))
}

// GetLatency mocks base method.
func (m *MockResponse) GetLatency() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatency")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetLatency indicates an expected call of GetLatency.
func (mr *MockResponseMockRecorder) GetLatency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatency", reflect.TypeOf((*MockResponse)(nil).GetLatency))
}

// GetRespTime mocks base method.
func (m *MockResponse) GetRespTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRespTime indicates an expected call of GetRespTime.
func (mr *MockResponseMockRecorder) GetRespTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespTime", reflect.TypeOf((*MockResponse)(nil).GetRespTime))
}

// IsPermanentError mocks base method.
func (m *MockResponse) IsPermanentError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPermanentError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPermanentError indicates an expected call of IsPermanentError.
func (mr *MockResponseMockRecorder) IsPermanentError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPermanentError", reflect.TypeOf((*MockResponse)(nil).IsPermanentError))
}

// IsRetryMoreError mocks base method.
func (m *MockResponse) IsRetryMoreError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryMoreError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetryMoreError indicates an expected call of IsRetryMoreError.
func (mr *MockResponseMockRecorder) IsRetryMoreError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryMoreError", reflect.TypeOf((*MockResponse)(nil).IsRetryMoreError))
}

// IsSucceed mocks base method.
func (m *MockResponse) IsSucceed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSucceed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSucceed indicates an expected call of IsSucceed.
func (mr *MockResponseMockRecorder) IsSucceed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSucceed", reflect.TypeOf((*MockResponse)(nil).IsSucceed))
}
